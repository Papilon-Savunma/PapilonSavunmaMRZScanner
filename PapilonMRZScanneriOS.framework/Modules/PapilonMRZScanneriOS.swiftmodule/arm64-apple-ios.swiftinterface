// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 effective-4.1.50 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -Onone -module-name PapilonMRZScanneriOS
import CoreGraphics
import CoreImage
import Foundation
@_exported import PapilonMRZScanneriOS
import Swift
import Vision
import _Concurrency
public enum MRZFormat : Swift.CaseIterable {
  case td1, td2, td3
  public var lineLength: Swift.Int {
    get
  }
  public var linesCount: Swift.Int {
    get
  }
  public static func == (a: PapilonMRZScanneriOS.MRZFormat, b: PapilonMRZScanneriOS.MRZFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PapilonMRZScanneriOS.MRZFormat]
  public static var allCases: [PapilonMRZScanneriOS.MRZFormat] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MRZResult : Swift.Hashable {
  public enum DocumentType : Swift.CaseIterable {
    case visa
    case passport
    case id
    case residencePermit
    case undefined
    public static func == (a: PapilonMRZScanneriOS.MRZResult.DocumentType, b: PapilonMRZScanneriOS.MRZResult.DocumentType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [PapilonMRZScanneriOS.MRZResult.DocumentType]
    public static var allCases: [PapilonMRZScanneriOS.MRZResult.DocumentType] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Sex : Swift.CaseIterable {
    case male
    case female
    case unspecified
    public static func == (a: PapilonMRZScanneriOS.MRZResult.Sex, b: PapilonMRZScanneriOS.MRZResult.Sex) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [PapilonMRZScanneriOS.MRZResult.Sex]
    public static var allCases: [PapilonMRZScanneriOS.MRZResult.Sex] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let format: PapilonMRZScanneriOS.MRZFormat
  public let documentType: PapilonMRZScanneriOS.MRZResult.DocumentType
  public let countryCode: Swift.String
  public let surnames: Swift.String
  public let givenNames: Swift.String
  public let documentNumber: Swift.String?
  public let nationalityCountryCode: Swift.String
  public let birthdate: Foundation.Date?
  public let sex: PapilonMRZScanneriOS.MRZResult.Sex
  public let expiryDate: Foundation.Date?
  public let optionalData: Swift.String?
  public let optionalData2: Swift.String?
  public init(format: PapilonMRZScanneriOS.MRZFormat, documentType: PapilonMRZScanneriOS.MRZResult.DocumentType, countryCode: Swift.String, surnames: Swift.String, givenNames: Swift.String, documentNumber: Swift.String?, nationalityCountryCode: Swift.String, birthdate: Foundation.Date?, sex: PapilonMRZScanneriOS.MRZResult.Sex, expiryDate: Foundation.Date?, optionalData: Swift.String?, optionalData2: Swift.String?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PapilonMRZScanneriOS.MRZResult, b: PapilonMRZScanneriOS.MRZResult) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias ParsedResult = PapilonMRZScanneriOS.MRZResult
public enum RecognitionLevel {
  case accurate
  case fast
  public static func == (a: PapilonMRZScanneriOS.RecognitionLevel, b: PapilonMRZScanneriOS.RecognitionLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ImageMRZScanner {
  public init()
  public func scan(scanningImage: PapilonMRZScanneriOS.ScanningImage, orientation: ImageIO.CGImagePropertyOrientation, regionOfInterest: CoreGraphics.CGRect? = nil, minimumTextHeight: Swift.Float? = nil, recognitionLevel: PapilonMRZScanneriOS.RecognitionLevel = .accurate, foundBoundingRectsHandler: (([CoreGraphics.CGRect]) -> Swift.Void)? = nil, completionHandler: @escaping (Swift.Result<PapilonMRZScanneriOS.DocumentScanningResult<PapilonMRZScanneriOS.ParsedResult>, Swift.Error>) -> Swift.Void)
}
public struct MRZParser {
  public init(isOCRCorrectionEnabled: Swift.Bool)
  public func parse(mrzLines: [Swift.String]) -> PapilonMRZScanneriOS.MRZResult?
  public func parse(mrzString: Swift.String) -> PapilonMRZScanneriOS.MRZResult?
}
public enum ScanningImage {
  case cgImage(CoreGraphics.CGImage)
  case pixelBuffer(CoreVideo.CVPixelBuffer)
}
public typealias ScannedBoundingRects = (valid: [CoreGraphics.CGRect], invalid: [CoreGraphics.CGRect])
public struct DocumentScanningResult<T> {
  public let result: T
  public let boundingRects: PapilonMRZScanneriOS.ScannedBoundingRects
}
@_hasMissingDesignatedInitializers final public class LiveMRZScanner {
  public init(frequency: Swift.Int = 2)
  final public func scanFrame(scanningImage: PapilonMRZScanneriOS.ScanningImage, orientation: ImageIO.CGImagePropertyOrientation, regionOfInterest: CoreGraphics.CGRect? = nil, minimumTextHeight: Swift.Float? = nil, foundBoundingRectsHandler: (([CoreGraphics.CGRect]) -> Swift.Void)? = nil, completionHandler: @escaping (Swift.Result<PapilonMRZScanneriOS.DocumentScanningResult<PapilonMRZScanneriOS.ParsedResult>, Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension PapilonMRZScanneriOS.MRZFormat : Swift.Equatable {}
extension PapilonMRZScanneriOS.MRZFormat : Swift.Hashable {}
extension PapilonMRZScanneriOS.MRZResult.DocumentType : Swift.Equatable {}
extension PapilonMRZScanneriOS.MRZResult.DocumentType : Swift.Hashable {}
extension PapilonMRZScanneriOS.MRZResult.Sex : Swift.Equatable {}
extension PapilonMRZScanneriOS.MRZResult.Sex : Swift.Hashable {}
extension PapilonMRZScanneriOS.RecognitionLevel : Swift.Equatable {}
extension PapilonMRZScanneriOS.RecognitionLevel : Swift.Hashable {}
